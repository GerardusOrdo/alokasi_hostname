import 'package:meta/meta.dart';

import '../../domain/entities/dc_hardware.dart';

class DcHardwareModel extends DcHardware {
  DcHardwareModel({
    int id,
    int idOwner,
    String owner,
    int idDcRack,
    String rackName,
    int idBrand,
    String brand,
    int idHwModel,
    String hwModel,
    int frontbackFacing,
    int idHwType,
    String hwType,
    int idMountedForm,
    String mountedForm,
    int hwConnectType,
    bool isEnclosure,
    int enclosureColumn,
    int enclosureRow,
    bool isBlade,
    int idParent,
    int xInEnclosure,
    int yInEnclosure,
    @required String hwName,
    String sn,
    int uHeight,
    int uPosition,
    int xPositionInRack,
    int yPositionInRack,
    int cpuCore,
    int memoryGb,
    int diskGb,
    double watt,
    double ampere,
    int width,
    int height,
    bool isReserved,
    bool requirePosition,
    String image,
    String notes,
    bool deleted,
    String create,
  }) : super(
          id: id,
          idOwner: idOwner,
          owner: owner,
          idDcRack: idDcRack,
          rackName: rackName,
          idBrand: idBrand,
          brand: brand,
          idHwModel: idHwModel,
          hwModel: hwModel,
          frontbackFacing: frontbackFacing,
          idHwType: idHwType,
          hwType: hwType,
          idMountedForm: idMountedForm,
          mountedForm: mountedForm,
          hwConnectType: hwConnectType,
          isEnclosure: isEnclosure,
          enclosureColumn: enclosureColumn,
          enclosureRow: enclosureRow,
          isBlade: isBlade,
          idParent: idParent,
          xInEnclosure: xInEnclosure,
          yInEnclosure: yInEnclosure,
          hwName: hwName,
          sn: sn,
          uHeight: uHeight,
          uPosition: uPosition,
          xPositionInRack: xPositionInRack,
          yPositionInRack: yPositionInRack,
          cpuCore: cpuCore,
          memoryGb: memoryGb,
          diskGb: diskGb,
          watt: watt,
          ampere: ampere,
          width: width,
          height: height,
          isReserved: isReserved,
          requirePosition: requirePosition,
          image: image,
          notes: notes,
          deleted: deleted,
          create: create,
        );
  factory DcHardwareModel.fromMap(Map<String, dynamic> map) {
    if (map == null) return null;
    return DcHardwareModel(
      id: map['id'],
      idOwner: map['id_owner'],
      owner: map['owner'],
      idDcRack: map['id_dc_rack'],
      rackName: map['rack_name'],
      idBrand: map['id_brand'],
      brand: map['brand'],
      idHwModel: map['id_hw_model'],
      hwModel: map['hw_model'],
      frontbackFacing: map['frontback_facing'],
      idHwType: map['id_hw_type'],
      hwType: map['hw_type'],
      idMountedForm: map['id_mounted_form'],
      mountedForm: map['mounted_form'],
      hwConnectType: map['hw_connect_type'],
      isEnclosure: map['is_enclosure'],
      enclosureColumn: map['enclosure_column'],
      enclosureRow: map['enclosure_row'],
      isBlade: map['is_blade'],
      idParent: map['id_parent'],
      xInEnclosure: map['x_in_enclosure'],
      yInEnclosure: map['y_in_enclosure'],
      hwName: map['hw_name'],
      sn: map['sn'],
      uHeight: map['u_height'],
      uPosition: map['u_position'],
      xPositionInRack: map['x_position_in_rack'],
      yPositionInRack: map['y_position_in_rack'],
      cpuCore: map['cpu_core'],
      memoryGb: map['memory_gb'],
      diskGb: map['disk_gb'],
      watt: map['watt'],
      ampere: map['ampere'],
      width: map['width'],
      height: map['height'],
      isReserved: map['is_reserved'],
      requirePosition: map['require_position'],
      image: map['image'],
      notes: map['notes'],
      deleted: map['deleted'],
      create: map['create'],
    );
  }

  factory DcHardwareModel.fromDcHardware(DcHardware dcHardware) {
    if (dcHardware == null) return null;
    return DcHardwareModel(
      id: dcHardware.id,
      idOwner: dcHardware.idOwner,
      owner: dcHardware.owner,
      idDcRack: dcHardware.idDcRack,
      rackName: dcHardware.rackName,
      idBrand: dcHardware.idBrand,
      brand: dcHardware.brand,
      idHwModel: dcHardware.idHwModel,
      hwModel: dcHardware.hwModel,
      frontbackFacing: dcHardware.frontbackFacing,
      idHwType: dcHardware.idHwType,
      hwType: dcHardware.hwType,
      idMountedForm: dcHardware.idMountedForm,
      mountedForm: dcHardware.mountedForm,
      hwConnectType: dcHardware.hwConnectType,
      isEnclosure: dcHardware.isEnclosure,
      enclosureColumn: dcHardware.enclosureColumn,
      enclosureRow: dcHardware.enclosureRow,
      isBlade: dcHardware.isBlade,
      idParent: dcHardware.idParent,
      xInEnclosure: dcHardware.xInEnclosure,
      yInEnclosure: dcHardware.yInEnclosure,
      hwName: dcHardware.hwName,
      sn: dcHardware.sn,
      uHeight: dcHardware.uHeight,
      uPosition: dcHardware.uPosition,
      xPositionInRack: dcHardware.xPositionInRack,
      yPositionInRack: dcHardware.yPositionInRack,
      cpuCore: dcHardware.cpuCore,
      memoryGb: dcHardware.memoryGb,
      diskGb: dcHardware.diskGb,
      watt: dcHardware.watt,
      ampere: dcHardware.ampere,
      width: dcHardware.width,
      height: dcHardware.height,
      isReserved: dcHardware.isReserved,
      requirePosition: dcHardware.requirePosition,
      image: dcHardware.image,
      notes: dcHardware.notes,
      deleted: dcHardware.deleted,
      create: dcHardware.create,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'id_owner': idOwner,
      'owner': owner,
      'id_dc_rack': idDcRack,
      'rack_name': rackName,
      'id_brand': idBrand,
      'brand': brand,
      'id_hw_model': idHwModel,
      'hw_model': hwModel,
      'frontback_facing': frontbackFacing,
      'id_hw_type': idHwType,
      'hw_type': hwType,
      'id_mounted_form': idMountedForm,
      'mounted_form': mountedForm,
      'hw_connect_type': hwConnectType,
      'is_enclosure': isEnclosure,
      'enclosure_column': enclosureColumn,
      'enclosure_row': enclosureRow,
      'is_blade': isBlade,
      'id_parent': idParent,
      'x_in_enclosure': xInEnclosure,
      'y_in_enclosure': yInEnclosure,
      'hw_name': hwName,
      'sn': sn,
      'u_height': uHeight,
      'u_position': uPosition,
      'x_position_in_rack': xPositionInRack,
      'y_position_in_rack': yPositionInRack,
      'cpu_core': cpuCore,
      'memory_gb': memoryGb,
      'disk_gb': diskGb,
      'watt': watt,
      'ampere': ampere,
      'width': width,
      'height': height,
      'is_reserved': isReserved,
      'require_position': requirePosition,
      'image': image,
      'notes': notes,
      'deleted': deleted,
      'create': create,
    };
  }
}
